local tweening = game:GetService("TweenService")
local user = game:GetService("Players").LocalPlayer
local camera = game.Workspace.CurrentCamera
local cutSceneFinished = false
local spawnMenu = game.ReplicatedStorage.SpawnMenu
local spawnUnit = game.ReplicatedStorage.SpawnUnit
local unitFolder = game.Workspace:FindFirstChild("UnitDisplay")
local currentDisplay = game.Workspace:FindFirstChild("CurrentDisplay")
local mapContent = game.Workspace.MapContent
local menu = script.Parent.Menu
local info = script.Parent.Info
local startPoint : Vector3
local endPoint: Vector3

local confirmUnit = menu.Spawn
local barracksLocation = nil
local selectedUnit = nil

local unitDescriptions = {
	["Soldier"] = "Insert stats here",
	["Scout"]  = "Insert stats here",
	["Tank"] = "Tonk",
}

function triggerProximity()
	for _, parts in pairs(mapContent:GetDescendants()) do
		if parts:IsA("ProximityPrompt") then
			if parts.Enabled == true then
				parts.Enabled = false
			else
				parts.Enabled = true
			end
		end
	end
end

function ScaleCharacter(Character: Model,Scale : number)
	local Origin = Character:GetPivot()
	local Size = Character:GetExtentsSize()

	local GroundLevel = Origin - (Origin.UpVector * (Size.Y/2))

	for _,Object : Instance in Character:GetDescendants() do
		if Object:IsA("BasePart") then
			Object.Size *= Scale
		end

		if Object:IsA("Motor6D") or Object:IsA("Weld") then
			local x, y, z, Xx, Yx, Zx, Xy, Yy, Zy, Xz, Yz, Zz = Object.C0:GetComponents()
			Object.C0 = CFrame.new(x*Scale, y*Scale, z*Scale, Xx, Yx, Zx, Xy, Yy, Zy, Xz, Yz, Zz)
			x, y, z, Xx, Yx, Zx, Xy, Yy, Zy, Xz, Yz, Zz = Object.C1:GetComponents()
			Object.C1 = CFrame.new(x*Scale, y*Scale, z*Scale, Xx, Yx, Zx, Xy, Yy, Zy, Xz, Yz, Zz)
		end

		if Object:IsA("SpecialMesh") and Object:FindFirstAncestorWhichIsA("Accessory") then
			Object.Scale *= Scale
			Object.Offset *= Scale
		end

		if Object:IsA("Attachment") and not Object:FindFirstAncestorWhichIsA("Accessory") then
			Object.Position *= Scale
		end

		if Object:IsA("Humanoid") then
			Object.HipHeight = Object.HipHeight * Scale
		end
	end

	Character:PivotTo(GroundLevel * CFrame.new(0,(Size*Scale).Y/2,0))
end

function displayUnit(requestedUnit)
	info.TextLabel.Text = unitDescriptions[requestedUnit.Name]
	
	currentDisplay:ClearAllChildren()
	local replacement = requestedUnit:Clone()
	replacement.Parent = unitFolder
	requestedUnit.Parent = currentDisplay
	selectedUnit = requestedUnit.Name
	ScaleCharacter(requestedUnit, 0.5)
end

spawnMenu.OnClientEvent:Connect(function(origin: Model)
	barracksLocation = origin
	triggerProximity()
	task.wait(0.5)
	changeTransparency(0.8)
	menu.Visible = true
	info.Visible = true
	local unit = displayUnit(unitFolder.Soldier)
end)


function closeMenu()
	barracksLocation = nil
	triggerProximity()
	currentDisplay:ClearAllChildren()
	spawnMenu:FireServer()
	camera.CameraType = Enum.CameraType.Custom
	changeTransparency(0)
	menu.Visible = false
	info.Visible = false
end

function changeTransparency(number : number, model : Model)
	for index, parts in pairs(user.Character:GetDescendants()) do
		if (parts:IsA("BasePart") or parts:IsA("UnionOperation")) and parts.Name ~= "HumanoidRootPart" then
			parts.Transparency = number
		end
	end
end

for index, guis in pairs(menu.Selection:GetChildren()) do
	if guis:IsA("TextButton") then
		guis.MouseButton1Click:Connect(function()
			if guis.Name == "WIP" then
				displayUnit(unitFolder.Unknown)
			elseif guis.Name == "Soldier" then
				displayUnit(unitFolder.Soldier)
			elseif guis.Name == "Scout" then
				displayUnit(unitFolder.Scout)
			elseif guis.Name == "Tank" then
				displayUnit(unitFolder.Tank)
			end
		end)
	end
end

menu.Close.MouseButton1Click:Connect(closeMenu)

confirmUnit.MouseButton1Click:Connect(function()
	if selectedUnit ~= nil then
		currentDisplay:ClearAllChildren()
		task.wait()
		spawnUnit:FireServer(selectedUnit, barracksLocation)
		selectedUnit = nil
		barracksLocation = nil
		closeMenu()
	end
end)

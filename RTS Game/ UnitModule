local unitModule = {
	["Soldier"] = {
		["Damage"] = 4,
		["Speed"] = 1.5,
		["Firerate"] = 0.75,
		["Health"] = 100,
		["Cost"] = 2,
	},
	["Scout"] = {
		["Damage"] = 1.5,
		["Speed"] = 2,
		["Firerate"] = 1,
		["Health"] = 75,
		["Cost"] = 3,
	},
	["Tank"] = {
		["Damage"] = 15,
		["Speed"] = 1.25,
		["Firerate"] = 2,
		["Health"] = 200,
		["Cost"] = 5
	},
	["Elite Guard"] = {
		["Damage"] = 10,
		["Speed"] = 1,
		["Firerate"] = 0.5,
		["Health"] = 500,
		["Cost"] = 10,
	},
	["Medium Tank"] = {
		["Damage"] = 50,
		["Speed"] = 1.15,
		["Firerate"] = 2.25,
		["Health"] = 275,
		["Cost"] = 15,
	},

	["Battlecruiser"] = {
		-- more health and slightly more dps
		-- faster
		["Damage"] = 1,
		["Speed"] = 1,
		["Firerate"] = 1,
		["Health"] = 1,
		["Cost"] = 1,

	},
	["Dreadnought"] = {
		-- more tanky
		["Damage"] = 1,
		["Speed"] = 1,
		["Firerate"] = 1,
		["Health"] = 1,
		["Cost"] = 1,		
	},
}

local terrainDebuffs = {	
	["Plains"] = 1,
	["Hilly"] = 0.8,
	["Mountainous"] = 0.5,
	["Arctic"] = 0.35,
	["Ocean"] = 2,

	["LavenderForest"] = 1,
	["CytomicForest"] = 1,
	["SunBiome"] = 0.85,
}

-- [UNIT MANAGER] --

-- Idle, up, shoot, down, run
local tempAnimTable = {16745460770, 16745466315, 16745463460, 16745469084, 16745472209}
local tweenService = game:GetService("TweenService")

function getLandInfo(unit : Model)
	local raycastParams = RaycastParams.new()
	raycastParams.FilterDescendantsInstances = {game.Workspace.MapPieces}
	raycastParams.FilterType = Enum.RaycastFilterType.Include
	if unit.PrimaryPart == nil then return end
	local raycast = workspace:Raycast(unit.PrimaryPart.Position, Vector3.new(0,-100,0), raycastParams)

	if raycast ~= nil then
		local pieces = game.Workspace.MapPieces:GetChildren()
		local locatePiece = table.find(pieces, raycast.Instance)
		-- unit.Humanoid.WalkSpeed = unitModule[unit.Name].Speed * terrainDebuffs[pieces[locatePiece]:GetAttribute("TerrainType")]

--[[		
		if unit:GetAttribute("Owner") ~= pieces[locatePiece]:GetAttribute("LandOwner") and pieces[locatePiece].Name ~= "TempOceanPlaceHolder" then
			pieces[locatePiece]:SetAttribute(unit:GetAttribute("Owner"))
			pieces[locatePiece].Color = leaders[unit:GetAttribute("Owner")]
		end ]]--
	end
end

local tempRemote = game.ReplicatedStorage.TEMPSPAWNREMOTE
local removeTroops = game.ReplicatedStorage.RemoveTroops

tempRemote.OnServerEvent:Connect(function(player, position, troopType)
	local clone

	if player:WaitForChild("leaderstats").Money.Value < unitModule[troopType].Cost then
		return
	else
		player.leaderstats.Money.Value -= unitModule[troopType].Cost
	end

	local countryModule = require(game.ServerScriptService.CountryModule)
	local leaders = countryModule.getInfo()
	if leaders[player.Name] == nil then
		print("requires country first")
		return
	end

	if troopType == "Battlecruiser" or troopType == "Dreadnought" then
		clone = game.ReplicatedFirst.UnitDisplay.ShipRender:Clone()
	else
		clone = game.ReplicatedFirst.UnitDisplay.Render:Clone()
	end

	clone:SetAttribute("Owner", player.Name)
	clone.Parent = game.Workspace.Units
	clone.PrimaryPart.Anchored = false
	clone:PivotTo(CFrame.new(position))

	local renderUnit = game.ReplicatedStorage.RenderUnit
	clone.Name = troopType
	renderUnit:FireAllClients(clone)

	local humanoid = clone:FindFirstChildWhichIsA("Humanoid")
	humanoid.MaxHealth, humanoid.Health = unitModule[troopType].Health, unitModule[troopType].Health
	humanoid.WalkSpeed = unitModule[troopType].Speed

	for index, parts in pairs(clone:GetDescendants()) do
		if parts:IsA("BasePart") or parts:IsA("UnionOperation") then
			parts.CollisionGroup = "Troops"
		elseif parts:IsA("Humanoid") then
			parts:SetStateEnabled(Enum.HumanoidStateType.Freefall, false)
			parts:SetStateEnabled(Enum.HumanoidStateType.Climbing, false)
			parts:SetStateEnabled(Enum.HumanoidStateType.Jumping, false)
			parts:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
			parts:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false)
			parts:SetStateEnabled(Enum.HumanoidStateType.Seated, false)
			parts:SetStateEnabled(Enum.HumanoidStateType.Swimming, false)
		end
	end

	task.wait(0.25)

	clone.PrimaryPart.Anchored = true
	clone.PrimaryPart.Position = clone.PrimaryPart.Position * Vector3.new(1, 0, 1) + Vector3.new(0, -14.84, 0)

	unitModule.Attack(clone)
end)

removeTroops.OnServerEvent:Connect(function(player, units)
	if units == nil then
		for index, units in pairs(workspace.Units:GetChildren()) do
			if units:GetAttribute("Owner") == player.Name then
				units:Destroy()
			end
		end
	else
		for index, unit in pairs(units) do
			if table.find(workspace.Units:GetChildren(), unit) then
				unit:Destroy()
			end
		end
	end
end)

local params = OverlapParams.new()
params.FilterDescendantsInstances = {game.Workspace.Units}
params.FilterType = Enum.RaycastFilterType.Include

function unitModule.Attack(Origin : Model)
	local unitName = Origin.Name
	local humanoid = Origin:FindFirstChild("Humanoid")

	if humanoid == nil or unitModule[unitName] == nil then 
		warn(Origin.Name .. " has missing components!")
		return 
	end

	while humanoid.Health > 0 and Origin.Parent ~= nil do

		task.wait(unitModule[unitName].Firerate)

		--[[
		task.spawn(function()
			while humanoid.Health > 0 do
				task.wait(0.15)
				getLandInfo(Origin)
			end
		end)
		]]--

		if Origin:FindFirstChild("HumanoidRootPart") ~= nil then
			-- task.spawn(fire, Origin, target)
			local contactedParts = game.Workspace:GetPartsInPart(Origin:WaitForChild("HumanoidRootPart"), params)

			-- print(contactedParts)

			for i = #contactedParts, 1, -1 do
				if contactedParts[i].Parent:GetAttribute("Owner") == Origin:GetAttribute("Owner") or contactedParts[i].Name ~= "HumanoidRootPart" then
					table.remove(contactedParts, i)
				end
			end

			for index, detectedUnits in pairs(contactedParts) do
				if detectedUnits ~= nil and humanoid.Health > 0 then

					if detectedUnits.Parent:FindFirstChildWhichIsA("Tween") then
						detectedUnits.Parent:FindFirstChildWhichIsA("Tween"):Pause()
						detectedUnits.Parent:FindFirstChildWhichIsA("Tween"):Destroy()
					end

					if Origin:FindFirstChildWhichIsA("Tween") then
						Origin:FindFirstChildWhichIsA("Tween"):Pause()
						Origin:FindFirstChildWhichIsA("Tween"):Destroy()
					end

					detectedUnits.Parent.Humanoid:TakeDamage(unitModule[Origin.Name].Damage / #contactedParts)
				end
			end	
		end
	end
	task.wait(0.05)
	Origin:Destroy()
end

return unitModule
